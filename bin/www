#!/usr/bin/env node
/**
 * module dependencies.
 */

require('dotenv').config()

const app = require('../app');
const debug = require('debug')('testauth:server');
const http = require('http');
const config = require('config');
const db = require('../database/db');

/**
 * get port from environment and store in Express.
 */

const port = normalizePort(config.util.getEnv('PORT') || config.get('port'));

app.set('port', port);

/**
 * create HTTP server.
 */

const server = http.createServer(app);

/**
 * listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

const conn = db.connection;

conn.on('error', console.error.bind(console, 'connection error:'));

conn.once('open', function () {
    debug('Connected to DB!');
    server.listen(port);
});

/**
 * normalize a port into a number, string, or false.
 */

function normalizePort (val) {
    var normalizedPort = parseInt(val, 10);

    if (isNaN(normalizedPort)) {
        // named pipe
        return val;
    }

    if (normalizedPort >= 0) {
        // port number
        return normalizedPort;
    }

    return false;
}

/**
 * event listener for HTTP server "error" event.
 */

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * event listener for HTTP server "listening" event.
 */

function onListening () {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;

    debug(`Listening on ${bind}`);
}